{"version":3,"file":"static/iframe.d38142449ec768c9a6a0.bundle.js","sources":["webpack:///./src/types.ts"],"sourcesContent":["/*\n * Copyright 2018 Teralytics\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport { PickingInfo } from 'deck.gl';\nimport { Feature, FeatureCollection, GeometryObject } from 'geojson';\n\nexport interface FlowColors {\n  max: string;\n  min?: string;\n}\n\nexport interface LocationCircleColors {\n  inner: string;\n  outgoing?: string;\n  incoming?: string;\n}\n\nexport interface LocationAreaColors {\n  outline: string;\n  normal: string;\n  selected: string;\n  highlighted?: string;\n  connected?: string;\n}\n\nexport interface Colors {\n  flows: FlowColors;\n  locationCircles?: LocationCircleColors;\n  locationAreas: LocationAreaColors;\n  dimmedOpacity?: number;\n}\n\nexport interface DiffColors {\n  positive: {\n    flows: FlowColors;\n    locationCircles?: LocationCircleColors;\n  };\n  negative: {\n    flows: FlowColors;\n    locationCircles?: LocationCircleColors;\n  };\n  locationAreas: LocationAreaColors;\n  dimmedOpacity?: number;\n}\n\nexport function isDiffColors(colors: DiffColors | Colors): colors is DiffColors {\n  return (colors as DiffColors).positive !== undefined;\n}\n\nexport type RGBA = [number, number, number, number];\n\n// tslint:disable-next-line:no-any\nexport type Flow = any;\n\n// tslint:disable-next-line:no-any\nexport type LocationProperties = any;\n\nexport type Location = Feature<GeometryObject, LocationProperties>;\n\nexport type Locations = FeatureCollection<GeometryObject, LocationProperties>;\n\nexport const enum LocationCircleType {\n  INNER = 'inner',\n  OUTER = 'outer',\n}\n\nexport interface LocationCircle {\n  location: Location;\n  type: LocationCircleType;\n}\n\nexport type Data = Flow | Location | LocationCircle;\n\nexport const enum PickingType {\n  LOCATION = 'location',\n  FLOW = 'flow',\n  LOCATION_AREA = 'location-area',\n}\n\nexport interface LocationPickingInfo extends PickingInfo<Data> {\n  type: PickingType.LOCATION;\n  object: Location;\n}\n\nexport interface LocationAreaPickingInfo extends PickingInfo<Data> {\n  type: PickingType.LOCATION_AREA;\n  object: Location;\n}\n\nexport interface FlowPickingInfo extends PickingInfo<Data> {\n  type: PickingType.FLOW;\n  object: Flow;\n}\n\nexport type FlowLayerPickingInfo = LocationPickingInfo | LocationAreaPickingInfo | FlowPickingInfo;\n\nexport type FlowAccessor<T> = (flow: Flow) => T;\nexport type LocationAccessor<T> = (location: Location) => T;\nexport type LocationCircleAccessor<T> = (locCircle: LocationCircle) => T;\n\nexport type NumberScale = (value: number) => number;\nexport type ColorScale = (value: number) => string;\n"],"mappings":"AA2DA","sourceRoot":""}